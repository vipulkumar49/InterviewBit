bool is_valid(int x, int y, int r, vector<int> &X, vector<int> &Y) {
    int n = X.size(); 
    for(int i = 0; i < n; i++) {
        int x1 = X[i], y1 = Y[i]; 
        if((x - x1) * (x - x1) + (y - y1) * (y - y1) <= r * r) {
            return false; 
        }
    }    
    return true;
}


string Solution::solve(int A, int B, int C, int D, vector<int> &E, vector<int> &F) {
    int dx[8] = {-1, -1, -1, 1, 1, 1, 0, 0};
    int dy[8] = {0, 1, -1, 1, 0, -1, -1, 1};
    queue<pair<int, int>> q;
    vector<vector<bool>> visited(A + 1, vector<bool>(B + 1, false));
    q.push({0, 0});
    visited[0][0] = true;
    while(!q.empty()) {
        int xi = q.front().first;
        int yi = q.front().second;
        q.pop();
        for(int k = 0; k < 8; k++) {
            int xf = xi + dx[k];
            int yf = yi + dy[k];
            if(xf >= 0 && yf >= 0 && xf <= A && yf <= B && !visited[xf][yf] && is_valid(xf, yf, D, E, F) )  {
                if(xf == A && yf == B) {
                    return "YES";
                }
                q.push({xf, yf});
                visited[xf][yf] = true;
            }
        }
    }
    return "NO";
}
